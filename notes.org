* Chapter 2 - Grammar
** Numbers
   - JS has a single number type. Internally it is represented as 64-but floating
   point (same as Java's double) so no separate integer type.
   1 and 1.0 are the same value
   
   - If a number literal has an exponent part (e or E) then value of literal is 
   computed by multiplying everything before e by 10 raised to power after e
   100 == 1e2 == 1E2
   
   - NaN is a number value not equal to any value including itself
     
   - Math.floor(number) method can be used to convert a number into an integer

** Strings
   - JS does not have a character type, rather a string with one character in it
   - Strings are immutable
     
** Statements
   - falsy values:
     
     -- false
     -- null
     -- undefined
     -- ''
     -- 0
     -- NaN

     All other values are considered truthy

   - "for in" enumerates the property names (keys) of an object. On each
     iteration, the key from the object is assigned to the variable.
     It is usually necessary to also include he 'object.hasOwnProperty(var)'
     to determine whether the object key was not on the protoype chain.

** Expressions
   - values of typeof are 'number', 'string', 'boolean', 'undefined', 'function', and
     'object'
   - If operand is array or null, the results in 'object' which is WRONG

    



* Chapter 3 - Objects

  - Simple types of JS are numbers, strings, booleans, null, and undefined.
    All else are objects
  - JS includes a prototype linkage feature which allows one object to inherit
    the properties of another. When used well, this can reduce object initialization
    and memory consumption 
  - Attempts to retrieve values from undefined will throw TypeError exception.
    This can be guarded with && operator
    
    flight.equipment                             // undefined         
    flight.equipment.model                       // throw "TypeError" 
    flight.equipment && flight.equipment.model   // undefined         

** Reference
   Objects are passed around by reference. They are never copied. 

   var x = stooge;
   x.nickname = 'Curly';
   var nick = stooge.nickname;
   // nick is 'Curly' because x and stooge
   // are references to the same object
   var a = {}, b = {}, c = {};
   // a, b, and c each refer to a
   // different empty object
   a = b = c = {};
   // a, b, and c all refer to
   // the same empty object

** Prototype
   - Every object is linked to a prototype object from which it can inherit properties. 
   - All objects created via object literals are linked to Object.prototype
   - When making a new object, one can select the object that should be its prototype

     #+BEGIN_SRC js

       if (typeof Object.create !== 'function') {
           Object.create = function (o) {
               var F = function () {};
               F.prototype = o;
               return new F();
           }
       };
       var another_stooge = Object.create(stooge)

     #+END_SRC

** Delete
   The delete operator can be used to remove a property from an object. It will
   remove a property if it has one. It will not touch any of the objects in the 
   prototype linkage.

   Removing a property from an object may allow a property form the prototype linkage to
   shine through

   #+BEGIN_SRC js

     another_stooge.nickname  // 'Moe'

     // Remove nickname from another_stooge, revealing
     // the nickname of the prototype.
     delete another_stooge.nickname;
     another_stooge.nickname
     // 'Curly'

   #+END_SRC

** Global Abatement
   One way to minimize the use of global variables is to create a single global variable
   for you application. That variable them becomes the container for your app.
   By reducing your global footprint to a single name, you reduce the chance of bad 
   interactions with other applications, widgets, or libraries.

   #+BEGIN_SRC js
     var MYAPP = {};

     MYAPP.stooge = {
         "first-name": "Joe",
         "last-name": "Howard"
     };
     MYAPP.flight = {
         airline: "Oceanic",
         number: 815,
         departure: {
             IATA: "SYD",
             time: "2004-09-22 14:55",
             city: "Sydney"
         },
         arrival: {
             IATA: "LAX",
             time: "2004-09-23 10:42",
             city: "Los Angeles"
         }
     };

   #+END_SRC





    





* Chapter 4 - Functions
** Function Objects
   Functions in JS are objects. Objects are collections of name/value pairs
   having a hidden link to a prototype object.

   As objects producted from object literals are linked to Object.prototype,
   function objects are linked to Function.prototype 
   (which itself is linked to Object.prototype)

   Every function also created with two additional hidden properties:
   1. The function's context
   2. Code that implements the function's behavior

   The function object created by a function literal contains a link to that
   outer context (i.e closure)

** Invocation
   In addition to the declared parameters, every function receives two additional 
   parameters:
   1) this
      
      The value of this is determined by the invocation pattern. There are four
      patterns of invocation in JS:
      - The method invocation pattern
      - The function invocation pattern
      - The constructor invocation pattern
      - apply invocation pattern
   2) arguments
      
   There are no runtime errors when the  number of arguments and the number of
   parameters don't match. If too many, extra values will be ignored. If too few,
   the extra argument values will be substituted with undefined

** The Method Invocation Pattern
   When a function is stored as a property of an object, we call it a method. When that
   method is invoked, this is bound to that object.
   An invocation expressions contains a refinement (i.e dot expression), it is invoked
   as a method.

   #+BEGIN_SRC js
     // Create myObject. It has a value and an increment    
     // method. The increment method takes an optional      
     // parameter. If the argument is not a number, then 1  
     // is used as the default.                             
     var myObject = {
         value: 0,
         increment: function (inc) {
             this.value += typeof inc === 'number' ? inc : 1;
         }
     };
     myObject.increment();
     document.writeln(myObject.value); // 1
     myObject.increment(2);
     document.writeln(myObject.value); // 3
   #+END_SRC

   The binding of this to the object happens at invocation time, thus this very late
   binding makes functions using this highly reusable

   Methods that get their object context from this are called public methods

** The Function Invocation Pattern

   When function is not property of an object, then it is invoked as a function. In this case,
   this is bound to the global object

   A consequence of this error in the language means a method cannot employ an inner 
   function to help it do its work because the inner function does not share the method's
   access to the object as its `this` is bound to the wrong value.

   Workaround: If the method defines a variable and assigns it the value of this,
   the inner function will have access to this through that variable. By convention,
   we name that variable `that`

   #+BEGIN_SRC js
     function add(a,b) { return a + b } 

     var myObject = {value: 1}

     myObject.double = function(){
         var that = this
         var helper = function() {
             console.log("This from inner function: " + this)
             that.value = add(that.value, that.value)
         }
         helper()
     }

     myObject.double()
     console.log(myObject)
   #+END_SRC

   #+RESULTS:
   : This from inner function: [object global]
   : { value: 2, double: [Function] }
   : undefined

** The Constructor Invocation Pattern
   Prototypal inheritance language means objects can inherit properties directly from other
   objects

   If a function is invoked with the `new` prefix, then a new object will be created with
   a hidden link to the value of the function's prototype member, and this will be bound
   to that new object. 

   The `new` prefix also changes the behavior of the return statement

   #+BEGIN_SRC js

     // Create a constructor function called Quo.
     // It makes an object with a status property.
     var Quo = function (string) {
         this.status = string;
     };
     // Give all instances of Quo a public method
     // called get_status.
     Quo.prototype.get_status = function ( ) {
         return this.status;
     };
     // Make an instance of Quo.
     var myQuo = new Quo("confused");
     console.log(myQuo.get_status( )); // confused
             
   #+END_SRC

   #+RESULTS:
   : confused
   : undefined

   Functions intended to be used with the new prefix are called constructors. By convention,
   they are kept in variables with capitalized names

** The Apply Invocation Pattern
   Since JS is a functional object-orientated language, functions can have methods

   apply method
   - Lets us construct an array of arguments to use to invoke a function.
     Also lets use choose the value of `this`
   - 2 parameters, the first value that should be bound to `this`, the second
     is the array of parameters

   #+BEGIN_SRC js

     var Quo = function (string) {
         this.status = string;
     };

     Quo.prototype.get_status = function ( ) {
         return this.status;
     };

     function add(a,b) { return a + b }

     var array = [3,4]
     var sum = add.apply(null, array) // sum is 7

     console.log(sum)
         
     // Make an object with a status member
     var statusObject = {
         status: 'A-OK'
     }

     // statusObject does not inherit from Quo.prototype,  
     // but we can invoke the get_status method on         
     // statusObject even though statusObject does not have
     // a get_status method.                               
     var status = Quo.prototype.get_status.apply(statusObject);
     console.log(status)
   #+END_SRC

   #+RESULTS:
   : 7
   : A-OK
   : undefined

** Arguments
   A bonus parameter that is available to function when they are invoked is arguments array.
   function has access to all arguments supplied with invocation, including excess args

   #+BEGIN_SRC js
     var sum = function() {
         var sum = 0
         for (let i = 0; i < arguments.length; ++i)
             sum+=arguments[i]
         return sum;
     }
     console.log(sum(1,2,3,4,5,6,7,8,9,10))
   #+END_SRC

   #+RESULTS:
   : 55
   : undefined

   Due to design error, arguments is not really an array. It is array-like object
   which has length property but lacks all array methods.

** Return
   If return not specified, then undefined us returned
   
   If the function was invoked with the `new` prefix and the return value is not
   an object, then `this` bound to the new object is returned insteadE

** Exceptions
   #+BEGIN_SRC js
     var add = function (a, b) {
         if (typeof a !== 'number' || typeof b !== 'number') {
             throw {
                 name: 'TypeError',
                 message: 'add needs numbers'
             };
         }
         return a + b;
     }
   #+END_SRC
   
   `throw` interrupts execution of the function. It should be given an exception object
   containing name property for identification and descriptive message
      
** Augmenting Types
   Adding a method to Object.prototype makes that method available to all objects. This
   also workds for functions, arrays, strings, numbers, regular expressions, and booleans.

   For example, by augmenting Function.prototype, we can make method available to all
   functions:

   #+BEGIN_SRC js
     Function.prototype.method = function(name, func) {
         this.prototype[name] = func
         return this
     }

     Number.method('integer', function() {
         return Math[this,0?'ceil':'floor'](this)
     })

     console.log((-10/3).integer())
   #+END_SRC

   #+RESULTS:
   : -4
   : undefined

** Scope
   JS does not have block scope, even though the syntax looks like it does rather function
   scope.

   note: let allows block scoping

   Function scope means that the parameters and variables defined in a function are visible
   anywhere in the function, but not necessarily mean a value is assigned to it.

   #+BEGIN_SRC js
     function t(){
         console.log(a) // Will not error out because it 'sees' the variable a

         var a = "Hello" 

         console.log(a)
     }
     t()
   #+END_SRC

   #+RESULTS:
   : undefined
   : Hello
   : undefined

** Closure
   With exception to `this` and `arguments`, inner functions get access to the parameters
   and variables of the function they are defined within.

   Closure is interesting for when the inner function has a longer lifetime than its outer
   function.

   We initialize myObject to a function that returns an object literal

   #+BEGIN_SRC js
     var myObject = function() {
         var value = 0;
         return {
             increment: function (inc) {
                 value+= typeof inc === 'number' ? inc : 1;
             },
             getValue : function() {
                 return value;
             }
         }
     }()
     myObject.increment(5)
     console.log(myObject.getValue())
   #+END_SRC

   #+RESULTS:
   : 5
   : undefined

** Module
   We can use functions and closure to make modules. A module is a function or object that
   presents an interface but that hides its states and implementation. 

   Here we avoid the use of global to store entities, and avoid runtime costs of evaluating
   literals everytime the function is invoked.

   #+BEGIN_SRC js
      String.prototype.deentityify = function() {
          var that = this
          // The entity table. It maps entity names to characters
          var entity = {
              quot: '"',
              lt: '<',
              gt: '>'
          }
          
          return function() {
              // This is the deentityify method. It calls the string
              // replace method, looking for substrings that start  
              // with '&' and end with ';'. If the characters in    
              // between are in the entity table, then replace the  
              // entity with the character from the table. It uses  
              // a regular expression (Chapter 7).                  
              return that.replace(/&([^&;]+);/g,
                                  function (a, b) {
                                      var r = entity[b];
                                      return typeof r === 'string' ? r : a;
                                  }
                                 )
          }()
      }
     console.log("&lt;&quot;&gt;".deentityify());
   #+END_SRC

   #+RESULTS:
   : <">
   : undefined

** Cascade
   By return `this` in functions, we can chain functions

** Curry
   Since functions are values, we can manipulate them in interesting ways. 
   Currying allows to produce new function by combining a function and a argument
   
   #+BEGIN_SRC js
     function add(a,b) { return a + b }

     Function.prototype.curry = function() {
         var slice = Array.prototype.slice
         var args = slice.apply(null,arguments)
         var that = this
         return function () {
             return that.apply(null, args.concat(slice.apply(null,arguments)))
         }()
     }
     var add1 = add.curry(1)
     console.log(add1(6))
   #+END_SRC

   #+RESULTS:

   #+BEGIN_SRC js
     function add(a,b) { return a + b }

     Function.prototype.curry = function() {
         var slice = Array.prototype.slice
         var args = slice.apply(null,arguments)
         var that = this
         return function () {
             return that.apply(null, args.concat(slice.apply(null,arguments)))
         }()
     }
     var add1 = add.curry(1)
     console.log(add1(6))
   #+END_SRC

** Memoization

   #+BEGIN_SRC js
     var memoizer = function (memo, formula) {
         var recur = function (n) {
             var result = memo[n]
             if (typeof result !== 'number'){
                 result = formula(recur, n)
                 memo[n] = result
             }
             return result
         }
         return recur
     }

     var fibonacci = memoizer([0,1], function (recur, n) {
         return recur(n-1) + recur(n-2)
     })

     var factorial = memoizer([1,1], function (recur, n) {
         return n*recur(n-1)
     })

     console.log(fibonacci(10)) 
     console.log(factorial(10)) 
                  
   #+END_SRC

   #+RESULTS:
   : 55
   : 3628800
   : undefined

** Chapter 5 Inheritance

